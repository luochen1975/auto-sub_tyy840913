name: 自动更新订阅与节点

on:
  schedule:
    - cron: '0 3 * * *'   # 每天 UTC 03:00
  workflow_dispatch:

jobs:
  update-job:
    runs-on: ubuntu-latest
    steps:
      - name: 检出仓库
        uses: actions/checkout@v4

      - name: 安装 Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: 安装依赖
        run: |
          python -m pip install --upgrade pip
          pip install PyYAML==6.0 requests

      - name: 执行更新脚本并捕获输出
        id: run_script
        run: |
          # 运行您的 Python 脚本，将其标准输出作为变量捕获
          script_output=$(python update.py 2>&1)
          echo "$script_output" # 打印出来以便在 Actions 日志中查看

          # 初始化变量
          total_updated_nodes=0
          valid_subs=0
          invalid_subs=0
          protocol_details=""

          # 逐行解析脚本输出
          echo "$script_output" | while IFS= read -r line; do
            if [[ "$line" =~ ^\[完成\]\ all\.txt\s*:\s*\K([0-9]+)(?=\s*条)$ ]]; then
              total_updated_nodes="${BASH_REMATCH[1]}"
            elif [[ "$line" =~ ^\[分组\]\ 有效\s*\K([0-9]+)(?=\s*条)$ ]]; then
              valid_subs="${BASH_REMATCH[1]}"
            elif [[ "$line" =~ ^\[分组\]\ 失效\s*\K([0-9]+)(?=\s*条)$ ]]; then
              invalid_subs="${BASH_REMATCH[1]}"
            elif [[ "$line" =~ ^\[写入\]\s*([a-zA-Z0-9_.]+\.(txt|yaml))\s*:\s*([0-9]+)(?=\s*条)$ ]]; then
              file_name="${BASH_REMATCH[1]}"
              nodes="${BASH_REMATCH[3]}"
              protocol_name=$(echo "$file_name" | sed 's/\.txt$//; s/\.yaml$//; s/_/- /g; s/\bclash\b/Clash/i; s/\b(vmess|vless|trojan|hysteria|tuic|naive-https|wireguard|ss|ssr)\b/\U&/g' | sed 's/Hysteria- 2/Hysteria2/')
              
              REPO_OWNER_REPO="${{ github.repository }}"
              REPO_URL="https://github.com/${REPO_OWNER_REPO}"
              BRANCH_NAME=${{ github.ref_name }}
              if [ -z "$BRANCH_NAME" ]; then
                BRANCH_NAME="main"
              fi
              DOWNLOAD_LINK="${REPO_URL}/raw/${BRANCH_NAME}/${file_name}"

              protocol_details+="- ${protocol_name}: ${nodes:-0} 条 ([下载](${DOWNLOAD_LINK}))\n"
            fi
          done

          echo "total_updated_nodes=${total_updated_nodes:-0}" >> $GITHUB_OUTPUT
          echo "valid_subs=${valid_subs:-0}" >> $GITHUB_OUTPUT
          echo "invalid_subs=${invalid_subs:-0}" >> $GITHUB_OUTPUT
          echo "protocol_details_output<<EOF" >> $GITHUB_OUTPUT
          echo "$protocol_details" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

            - name: 生成 README.md 内容
          run: |
          CURRENT_DATE=$(TZ='Asia/Shanghai' date '+%Y-%m-%d %H:%M:%S')
          echo "# 代理节点订阅" > README.md
          echo "" >> README.md
          echo "## 更新日志" >> README.md
          echo "" >> README.md
          echo "- **最近更新时间**: ${CURRENT_DATE} (UTC+8)" >> README.md
          echo "" >> README.md
          echo "### 概览" >> README.md
          echo "- **总节点数量**: ${{ steps.run_script.outputs.total_updated_nodes }} 条" >> README.md
          echo "- **有效订阅连接**: ${{ steps.run_script.outputs.valid_subs }} 条" >> README.md
          echo "- **失效订阅连接**: ${{ steps.run_script.outputs.invalid_subs }} 条" >> README.md
          echo "" >> README.md
          echo "### 各协议节点数量与下载" >> README.md
          echo "${{ steps.run_script.outputs.protocol_details_output }}" >> README.md
          echo "" >> README.md
          echo "*此文件由 GitHub Actions 自动生成和更新。*" >> README.md

      - name: 提交更新到 README.md
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add README.md
          if git diff --staged --quiet README.md; then
            echo "README.md 没有变化，无需提交。"
          else
            COMMIT_DATE=$(TZ='Asia/Shanghai' date '+%Y-%m-%d')
            git commit -m "更新节点信息和README.md (${COMMIT_DATE})"
            git push
          fi
