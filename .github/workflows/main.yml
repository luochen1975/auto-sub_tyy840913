name: 自动更新订阅与节点

on:
  schedule:
    - cron: '0 3 * * *'   # 每天 UTC 03:00
  workflow_dispatch:

jobs:
  update-job:
    runs-on: ubuntu-latest
    steps:
      - name: 检出仓库
        uses: actions/checkout@v4

      - name: 安装 Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: 安装依赖
        run: |
          python -m pip install --upgrade pip
          pip install PyYAML==6.0 requests

      - name: 执行更新脚本并捕获输出
        id: run_script
        run: |
          # 运行您的 Python 脚本，将其标准输出作为变量捕获
          script_output=$(python update.py 2>&1)
          echo "$script_output" # 打印出来以便在 Actions 日志中查看

          # 使用 grep -oP 直接提取关键数值
          # total_updated_nodes (总节点数)
          # 注意：日志中 all.txt 的数量可能没有紧挨着冒号，所以我们匹配 "all.txt" 后面紧跟着数字
          total_updated_nodes=$(echo "$script_output" | grep -oP '\[完成\]\ all\.txt\s*:\s*\K[0-9]+(?=\s*条)' || echo 0)
          echo "total_updated_nodes=${total_updated_nodes}" >> $GITHUB_OUTPUT

          # valid_subs (有效订阅)
          valid_subs=$(echo "$script_output" | grep -oP '\[分组\]\ 有效\s*\K[0-9]+(?=\s*条)' || echo 0)
          echo "valid_subs=${valid_subs}" >> $GITHUB_OUTPUT

          # invalid_subs (失效订阅)
          invalid_subs=$(echo "$script_output" | grep -oP '\[分组\]\ 失效\s*\K[0-9]+(?=\s*条)' || echo 0)
          echo "invalid_subs=${invalid_subs}" >> $GITHUB_OUTPUT

          # 用于构建 Markdown 格式的协议输出
          protocol_output=""

          # 动态从日志中提取所有被写入的文件及其对应的节点数量
          # 使用 grep -P 匹配并提取文件名和数量
          echo "$script_output" | grep -P '\[写入\]\s*([a-zA-Z0-9_.]+\.(txt|yaml))\s*:\s*([0-9]+)\s*条' | while IFS= read -r line; do
            # 从匹配到的行中再次提取捕获组，更稳定
            file_name=$(echo "$line" | grep -oP '\[写入\]\s*\K([a-zA-Z0-9_.]+\.(txt|yaml))')
            nodes=$(echo "$line" | grep -oP ':\s*\K[0-9]+(?=\s*条)')

            # 格式化协议名显示
            protocol_name=$(echo "$file_name" | sed 's/\.txt$//; s/\.yaml$//; s/_/- /g; s/\bclash\b/Clash/i; s/\b(vmess|vless|trojan|hysteria|tuic|naive-https|wireguard|ss|ssr)\b/\U&/g' | sed 's/Hysteria- 2/Hysteria2/')

            # 构建用于显示的 Markdown 字符串
            protocol_output+="- ${protocol_name}: ${nodes:-0} 条\n"
          done

          # 将构建好的协议输出字符串写入 GITHUB_OUTPUT
          echo "protocol_nodes_display_output<<EOF" >> $GITHUB_OUTPUT
          echo "$protocol_output" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT


      - name: 显示更新总数和各协议节点数
        run: |
          echo "## 代理节点更新概览"
          echo "" # 空行用于格式化
          echo "总节点数量: ${{ steps.run_script.outputs.total_updated_nodes }} 条"
          echo "有效订阅连接: ${{ steps.run_script.outputs.valid_subs }} 条"
          echo "失效订阅连接: ${{ steps.run_script.outputs.invalid_subs }} 条"
          echo "" # 空行用于格式化
          echo "### 各协议节点数量:"
          echo "${{ steps.run_script.outputs.protocol_nodes_display_output }}"


      - name: 提交更新
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add *.txt *.yaml
          changes=$(git diff --staged --name-only | grep -E '\.txt$|\.yaml$' || true)
          if [ -z "$changes" ]; then
            echo "没有检测到任何更改。"
          else
            git commit -m "更新代理节点数量 (${{ steps.run_script.outputs.total_updated_nodes }} 条)"
            git push
          fi
