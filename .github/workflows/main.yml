name: 自动更新订阅与节点 main

on:
  schedule:
    - cron: '0 3 * * *'   # 每天 UTC 03:00
  workflow_dispatch:

jobs:
  update-job:
    runs-on: ubuntu-latest
    steps:
      - name: 检出仓库
        uses: actions/checkout@v4

      - name: 安装 Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: 安装依赖
        run: |
          python -m pip install --upgrade pip
          pip install PyYAML==6.0 requests

      - name: 执行更新脚本并记录日志
        id: run-script
        run: |
          # 执行脚本并将输出保存到日志文件
          python update.py > update.log 2>&1
          # 调试：检查日志文件是否存在
          if [ -f "update.log" ]; then
            echo "日志文件生成成功" > debug.txt
            cat update.log >> debug.txt
          else
            echo "日志文件未生成" > debug.txt
          fi

      - name: 提取运行日志并统计节点更新
        run: |
          echo "# 更新日志" > README.md
          echo "## 最近一次运行详情" >> README.md
          echo "```" >> README.md
          # 统计每个协议的节点更新数量
          total_updates=0
          for proto in ss ssr vmess trojan hysteria tuic naive wireguard; do
            if [ -f "${proto}.txt" ]; then
              node_count=$(wc -l < "${proto}.txt")
              if [ $node_count -gt 0 ]; then
                echo "$proto 更新了 $node_count 个节点" >> README.md
                total_updates=$((total_updates + node_count))
              fi
            fi
          done
          echo "总共更新了 $total_updates 个节点" >> README.md
          # 添加运行日志
          echo "运行日志：" >> README.md
          if [ -f "update.log" ]; then
            cat update.log >> README.md
          else
            echo "无可用运行日志" >> README.md
          fi
          echo "```" >> README.md

      - name: 为每个协议添加下载链接
        run: |
          echo "## 下载链接" >> README.md
          for proto in ss ssr vmess trojan hysteria tuic naive wireguard; do
            echo "- [$proto 订阅链接](https://raw.githubusercontent.com/${{ github.repository }}/main/${proto}.txt)" >> README.md
          done

      - name: 提交更新
        run: |
          # 配置 Git 用户信息
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add *.txt *.yaml README.md update.log debug.txt
          changes=$(git diff --staged --name-only | grep -E '\.txt$|\.yaml$|README\.md|update\.log|debug\.txt' || true)
          if [ -z "$changes" ]; then
            echo "无检测到更改。"
          else
            git commit -m "更新代理节点数量和README.md"
            git push
          fi
