name: 自动更新订阅与节点

on:
  schedule:
    - cron: '0 3 * * *'   # 每天 UTC 03:00
  workflow_dispatch:

jobs:
  update-job:
    runs-on: ubuntu-latest
    steps:
      - name: 检出仓库
        uses: actions/checkout@v4

      - name: 安装 Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: 安装依赖
        run: |
          python -m pip install --upgrade pip
          pip install PyYAML==6.0 requests

      - name: 执行更新脚本并捕获输出
        id: run_script
        run: |
          # 运行您的 Python 脚本，将其标准输出作为变量捕获
          script_output=$(python update.py 2>&1)
          echo "$script_output" # 打印出来以便在 Actions 日志中查看

          # 初始化变量
          total_updated_nodes=0
          valid_subs=0
          invalid_subs=0
          protocol_output="" # 用于构建 Markdown 格式的输出

          # 逐行解析脚本输出
          echo "$script_output" | while IFS= read -r line; do
            if [[ "$line" =~ ^\[完成\]\ all\.txt\ :\ ([0-9]+)\ 条$ ]]; then
              # 匹配总节点数行：[完成] all.txt : X 条
              total_updated_nodes="${BASH_REMATCH[1]}"
            elif [[ "$line" =~ ^\[分组\]\ 有效\ ([0-9]+)\ 条$ ]]; then
              # 匹配有效订阅连接数行：[分组] 有效 X 条
              valid_subs="${BASH_REMATCH[1]}"
            elif [[ "$line" =~ ^\[分组\]\ 失效\ ([0-9]+)\ 条$ ]]; then
              # 匹配失效订阅连接数行：[分组] 失效 X 条
              invalid_subs="${BASH_REMATCH[1]}"
            elif [[ "$line" =~ ^\[写入\]\ ([a-zA-Z0-9_.]+\.(txt|yaml))\ :\ ([0-9]+)\ 条$ ]]; then
              # 匹配写入协议文件行：[写入] filename.txt : X 条 或 [写入] filename.yaml : X 条
              file_name="${BASH_REMATCH[1]}"
              nodes="${BASH_REMATCH[3]}"

              # 格式化协议名显示
              # 这里对文件名的处理逻辑保持不变，确保美观性
              protocol_name=$(echo "$file_name" | sed 's/\.txt$//; s/\.yaml$//; s/_/- /g; s/\bclash\b/Clash/i; s/\b(vmess|vless|trojan|hysteria|tuic|naive-https|wireguard|ss|ssr)\b/\U&/g' | sed 's/Hysteria- 2/Hysteria2/')

              # 构建用于显示的 Markdown 字符串
              protocol_output+="- ${protocol_name}: ${nodes:-0} 条\n"
            fi
          done

          # 将所有提取到的值写入 GITHUB_OUTPUT
          echo "total_updated_nodes=${total_updated_nodes:-0}" >> $GITHUB_OUTPUT
          echo "valid_subs=${valid_subs:-0}" >> $GITHUB_OUTPUT
          echo "invalid_subs=${invalid_subs:-0}" >> $GITHUB_OUTPUT
          echo "protocol_nodes_display_output<<EOF" >> $GITHUB_OUTPUT
          echo "$protocol_output" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT


      - name: 显示更新总数和各协议节点数
        run: |
          echo "## 代理节点更新概览"
          echo "" # 空行用于格式化
          echo "总节点数量: ${{ steps.run_script.outputs.total_updated_nodes }} 条"
          echo "有效订阅连接: ${{ steps.run_script.outputs.valid_subs }} 条"
          echo "失效订阅连接: ${{ steps.run_script.outputs.invalid_subs }} 条"
          echo "" # 空行用于格式化
          echo "### 各协议节点数量:"
          echo "${{ steps.run_script.outputs.protocol_nodes_display_output }}"


      - name: 提交更新
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add *.txt *.yaml
          changes=$(git diff --staged --name-only | grep -E '\.txt$|\.yaml$' || true)
          if [ -z "$changes" ]; then
            echo "没有检测到任何更改。"
          else
            git commit -m "更新代理节点数量 (${{ steps.run_script.outputs.total_updated_nodes }} 条)"
            git push
          fi
